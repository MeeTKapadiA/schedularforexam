//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace schedularforexam
{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;


    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ds1 : DataSet
    {

        private scheduleforexam_admin_login_tbDataTable tablescheduleforexam_admin_login_tb;

        public ds1()
        {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        protected ds1(SerializationInfo info, StreamingContext context)
        {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null))
            {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["scheduleforexam_admin_login_tb"] != null))
                {
                    this.Tables.Add(new scheduleforexam_admin_login_tbDataTable(ds.Tables["scheduleforexam_admin_login_tb"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scheduleforexam_admin_login_tbDataTable scheduleforexam_admin_login_tb
        {
            get
            {
                return this.tablescheduleforexam_admin_login_tb;
            }
        }

        public override DataSet Clone()
        {
            ds1 cln = ((ds1)(base.Clone()));
            cln.InitVars();
            return cln;
        }

        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        protected override void ReadXmlSerializable(XmlReader reader)
        {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["scheduleforexam_admin_login_tb"] != null))
            {
                this.Tables.Add(new scheduleforexam_admin_login_tbDataTable(ds.Tables["scheduleforexam_admin_login_tb"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }

        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }

        internal void InitVars()
        {
            this.tablescheduleforexam_admin_login_tb = ((scheduleforexam_admin_login_tbDataTable)(this.Tables["scheduleforexam_admin_login_tb"]));
            if ((this.tablescheduleforexam_admin_login_tb != null))
            {
                this.tablescheduleforexam_admin_login_tb.InitVars();
            }
        }

        private void InitClass()
        {
            this.DataSetName = "ds1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ds1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablescheduleforexam_admin_login_tb = new scheduleforexam_admin_login_tbDataTable();
            this.Tables.Add(this.tablescheduleforexam_admin_login_tb);
        }

        private bool ShouldSerializescheduleforexam_admin_login_tb()
        {
            return false;
        }

        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        public delegate void scheduleforexam_admin_login_tbRowChangeEventHandler(object sender, scheduleforexam_admin_login_tbRowChangeEvent e);

        [System.Diagnostics.DebuggerStepThrough()]
        public class scheduleforexam_admin_login_tbDataTable : DataTable, System.Collections.IEnumerable
        {

            private DataColumn columnadmin_id;

            private DataColumn columnadmin_pwd;

            internal scheduleforexam_admin_login_tbDataTable() :
                    base("scheduleforexam_admin_login_tb")
            {
                this.InitClass();
            }

            internal scheduleforexam_admin_login_tbDataTable(DataTable table) :
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }

            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            internal DataColumn admin_idColumn
            {
                get
                {
                    return this.columnadmin_id;
                }
            }

            internal DataColumn admin_pwdColumn
            {
                get
                {
                    return this.columnadmin_pwd;
                }
            }

            public scheduleforexam_admin_login_tbRow this[int index]
            {
                get
                {
                    return ((scheduleforexam_admin_login_tbRow)(this.Rows[index]));
                }
            }

            public event scheduleforexam_admin_login_tbRowChangeEventHandler scheduleforexam_admin_login_tbRowChanged;

            public event scheduleforexam_admin_login_tbRowChangeEventHandler scheduleforexam_admin_login_tbRowChanging;

            public event scheduleforexam_admin_login_tbRowChangeEventHandler scheduleforexam_admin_login_tbRowDeleted;

            public event scheduleforexam_admin_login_tbRowChangeEventHandler scheduleforexam_admin_login_tbRowDeleting;

            public void Addscheduleforexam_admin_login_tbRow(scheduleforexam_admin_login_tbRow row)
            {
                this.Rows.Add(row);
            }

            public scheduleforexam_admin_login_tbRow Addscheduleforexam_admin_login_tbRow(string admin_id, string admin_pwd)
            {
                scheduleforexam_admin_login_tbRow rowscheduleforexam_admin_login_tbRow = ((scheduleforexam_admin_login_tbRow)(this.NewRow()));
                rowscheduleforexam_admin_login_tbRow.ItemArray = new object[] {
                        admin_id,
                        admin_pwd};
                this.Rows.Add(rowscheduleforexam_admin_login_tbRow);
                return rowscheduleforexam_admin_login_tbRow;
            }

            public scheduleforexam_admin_login_tbRow FindByadmin_id(string admin_id)
            {
                return ((scheduleforexam_admin_login_tbRow)(this.Rows.Find(new object[] {
                            admin_id})));
            }

            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            public override DataTable Clone()
            {
                scheduleforexam_admin_login_tbDataTable cln = ((scheduleforexam_admin_login_tbDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            protected override DataTable CreateInstance()
            {
                return new scheduleforexam_admin_login_tbDataTable();
            }

            internal void InitVars()
            {
                this.columnadmin_id = this.Columns["admin_id"];
                this.columnadmin_pwd = this.Columns["admin_pwd"];
            }

            private void InitClass()
            {
                this.columnadmin_id = new DataColumn("admin_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadmin_id);
                this.columnadmin_pwd = new DataColumn("admin_pwd", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadmin_pwd);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnadmin_id}, true));
                this.columnadmin_id.AllowDBNull = false;
                this.columnadmin_id.Unique = true;
            }

            public scheduleforexam_admin_login_tbRow Newscheduleforexam_admin_login_tbRow()
            {
                return ((scheduleforexam_admin_login_tbRow)(this.NewRow()));
            }

            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new scheduleforexam_admin_login_tbRow(builder);
            }

            protected override System.Type GetRowType()
            {
                return typeof(scheduleforexam_admin_login_tbRow);
            }

            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.scheduleforexam_admin_login_tbRowChanged != null))
                {
                    this.scheduleforexam_admin_login_tbRowChanged(this, new scheduleforexam_admin_login_tbRowChangeEvent(((scheduleforexam_admin_login_tbRow)(e.Row)), e.Action));
                }
            }

            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.scheduleforexam_admin_login_tbRowChanging != null))
                {
                    this.scheduleforexam_admin_login_tbRowChanging(this, new scheduleforexam_admin_login_tbRowChangeEvent(((scheduleforexam_admin_login_tbRow)(e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.scheduleforexam_admin_login_tbRowDeleted != null))
                {
                    this.scheduleforexam_admin_login_tbRowDeleted(this, new scheduleforexam_admin_login_tbRowChangeEvent(((scheduleforexam_admin_login_tbRow)(e.Row)), e.Action));
                }
            }

            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.scheduleforexam_admin_login_tbRowDeleting != null))
                {
                    this.scheduleforexam_admin_login_tbRowDeleting(this, new scheduleforexam_admin_login_tbRowChangeEvent(((scheduleforexam_admin_login_tbRow)(e.Row)), e.Action));
                }
            }

            public void Removescheduleforexam_admin_login_tbRow(scheduleforexam_admin_login_tbRow row)
            {
                this.Rows.Remove(row);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        public class scheduleforexam_admin_login_tbRow : DataRow
        {

            private scheduleforexam_admin_login_tbDataTable tablescheduleforexam_admin_login_tb;

            internal scheduleforexam_admin_login_tbRow(DataRowBuilder rb) :
                    base(rb)
            {
                this.tablescheduleforexam_admin_login_tb = ((scheduleforexam_admin_login_tbDataTable)(this.Table));
            }

            public string admin_id
            {
                get
                {
                    return ((string)(this[this.tablescheduleforexam_admin_login_tb.admin_idColumn]));
                }
                set
                {
                    this[this.tablescheduleforexam_admin_login_tb.admin_idColumn] = value;
                }
            }

            public string admin_pwd
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablescheduleforexam_admin_login_tb.admin_pwdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablescheduleforexam_admin_login_tb.admin_pwdColumn] = value;
                }
            }

            public bool Isadmin_pwdNull()
            {
                return this.IsNull(this.tablescheduleforexam_admin_login_tb.admin_pwdColumn);
            }

            public void Setadmin_pwdNull()
            {
                this[this.tablescheduleforexam_admin_login_tb.admin_pwdColumn] = System.Convert.DBNull;
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        public class scheduleforexam_admin_login_tbRowChangeEvent : EventArgs
        {

            private scheduleforexam_admin_login_tbRow eventRow;

            private DataRowAction eventAction;

            public scheduleforexam_admin_login_tbRowChangeEvent(scheduleforexam_admin_login_tbRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            public scheduleforexam_admin_login_tbRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}
